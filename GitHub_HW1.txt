JSON
 1. Создать внешний репозиторий c названием JSON.
- заходим на сайт https://github.com/
- переходим в личный кабинет https://github.com/nzelenkevich
- открываем раздел репозиторий https://github.com/nzelenkevich?tab=repositories
- нажимаем на кнопку "new"
- в графе "Repository name" вводим JSON
- выбираем тип репозитрия "Public"
- ставим галочку напротив "Add a README file"
- нажимаем кнопку "Create repository"
- репозиторий JSON создан
 2. Клонировать репозиторий JSON на локальный компьютер.
- заходим в папку в которую хотим клонировать репозитрий JSON
- заходим в Terminal
- в репозитории JSON в GitHub жмем кнопку "<> Code"
- копирем ссылку на репозиторий в HTTPS
- вставляем в терминал, используя команду "git clone https://github.com/nzelenkevich/JSON.git"
- в терминале используя команду "ls -la" проверяем клонирован ли репозиторий JSON
 3. Внутри локального JSON создать файл “new.json”.
- в терминале переходим в папку JSON, используя команду "cd JSON"
- в терминале создаем новый файл new.json используя команду "touch new.json" 
- в терминале используя команду "ls -la" проверяем наличие нового файла new.json
 4. Добавить файл под гит.
- в терминале добавляем файл new.json на GitHub командой "git add new.json"
 5. Закоммитить файл.
- в терминале коммитим файл командой "git commit -m "new file made""
- в терминале используя команду "git status" убеждаемся в том, что коммит добавлен
 6. Отправить файл на внешний GitHub репозиторий.
- в терминале используя команду "git push" выгружаем коммиты с локального репозитория в удаленный репозиторий GitHub 
 7. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
- в терминале используя команду "vim new.json" переходим в режим редактирования
- в текстовом режиме нажимаем "i" для редактирования файла
- вношу данные: 
{

     "person_name": "Zelenkevich Natalia",
     "person_age": 37,
     "pets_quantity": 2,
     "desired salary amount": "1500usd"


}
- нажимаю последовательно для сохранения и выхода из режима редактирования "esc : x"
8. Отправить изменения на внешний репозиторий.
- в терминале используя команду "git commit -am "file update 1"" вносим изменение в файл и выгружаем коммит с локального репозитория в удаленный репозиторий GitHub 
- в терминале используем команду "git push" для выгрузки измененного закоммиченного файла в удаленный репазиторий 
9. Создать файл preferences.json
- в терминале создаем файл preferences.json используя команду "touch preferences.json"
10. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
- в терминале используя команду "vim preferences.json" переходим в текстовый режим
- в текстовом режиме нажимаем "i" для редактирования файла
- вношу данные: 
{

"favourite film": "Star wars",
"favourite soup opera":"Abbey Downtown",
"favourite food":"Padthai",
"favourite season": "spring",
"desired destination": "New Zealand"


}
- нажимаю последовательно для сохранения и выхода из режима редактирования "esc : x"
11. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
- в терминале создаем файл skills.json используя команду "touch skills.json"
- в терминале используя команду "vim skills.json" переходим в текстовый режим
- в текстовом режиме нажимаем "i" для редактирования файла
- вношу данные: 

{"Skills":
[ "Knowledge of different types of testing",
"Reporting skills",
"Basic knowledge of Linux commands",
"Mobile testing",
"SQL skills",
"API",
"JSON",
"XML",
"Postman",
"Charles",
"Fiddler",
"Dev Tols",
"GitHub",
"Agile scrum methology",
"etc." ]
}

- нажимаю последовательно для сохранения и выхода из режима редактирование "esc : x"
 12. Отправить сразу 2 файла на внешний репозиторий.
- в терминале используя команду "git add ." выбираю все файлы в папке
- в терминале используем команду "git push" для выгрузки закоммиченных файлов в удаленный репзиторий 
 13, 14. На веб интерфейсе создать файл bug_report.json.  Сделать Commit changes (сохранить) изменения на веб интерфейсе.
- в репозитории JSON нажать на кнопку "Add file"
- в дропдаун меню выбрать "Create new file"
- присвоить имя файлу bug_report.json
- выбрать radio button "Commit directly to the main branch"
- нажать на кнопку "Commit new file"
 15, 16. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 Сделать Commit changes (сохранить) изменения на веб интерфейсе.
- из списка файлов в репозитории JSON выбрать файл bug_report.json
- в файле кликнуть на кнопку со значком "карандаш" и в dropdown menu выбрать "Edit a file"
- внести изменения в файл в графе "Edit file":

{ 
"Issue Title": "Windows – Product Details Page – The product image can't be zoomed in",
"Issue Type": "Visual",
"Frequency": "Every Time",
"Priority": "Low",
"Action Performed":
[
"1. Click on the image of the product",
"2. Open https://academybugs.com/find-bugs/",
"3. Open any product",
"4. Observe the image of the product",
"5. The image is broken"
],
"Expected Result": "A zoomed image of the product is shown",
"Actual Result": "The image is broken",
"Error Message": "There is no error message"
}
- оставить комментарии к коммиту: update bug_report.json
- нажать на кнопку "Commit changes"
 17. Синхронизировать внешний и локальный репозиторий JSON
- в терминале используем команду "git pull" для синхронизации удаленного и локального репзитория 

XML
 18. Создать внешний репозиторий c названием XML.
- заходим на сайт https://github.com/
- переходим в личный кабинет https://github.com/nzelenkevich
- открываем раздел репозиторий https://github.com/nzelenkevich?tab=repositories
- нажимаем на кнопку "new"
- в графе "Repository name" вводим XML
- выбираем тип репозитрия "Public"
- ставим галочку напротив "Add a README file"
- нажимаем кнопку "Create repository"
- репозиторий XML создан
 19. Клонировать репозиторий XML на локальный компьютер.
- заходим в папку в которую хотим клонировать репозитрий XML
- заходим в Terminal
- в репозитории XML в GitHub жмем кнопку "<> Code"
- копирем ссылку на репозиторий в HTTPS
- вставляем в терминал, используя команду "git clone https://github.com/nzelenkevich/XML.git"
- в терминале используя команду "ls -la" проверяем клонирован ли репозиторий XML
 20. Внутри локального XML создать файл “new.xml”.
- в терминале переходим в папку XML, используя команду "cd XML"
- в терминале создаем новый файл new.json используя команду "touch new.xml" 
- в терминале используя команду "ls -la" проверяем наличие нового файла new.xml
 21. Добавить файл под гит.
- в терминале добавляем файл new.xml на GitHub командой "git add new.xml"
 22. Закоммитить файл.
- в терминале коммитим файл командой "git commit -m "new xml file""
- в терминале используя команду "git status" убеждаемся в том, что коммит добавлен
 23. Отправить файл на внешний GitHub репозиторий.
- в терминале используя команду "git push" выгружаем коммиты с локального репозитория в удаленный репозиторий GitHub
 24. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
будущая желаемая зарплата). Всё написать в формате XML.

 25. Отправить изменения на внешний репозиторий.

 26. Создать файл preferences.xml

 27. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, 
сторона которую хотели бы посетить) в формате XML.

 28. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML

 29. Сделать коммит в одну строку.

 30. Отправить сразу 2 файла на внешний репозиторий.

 31. На веб интерфейсе создать файл bug_report.xml.

 32. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 33. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.

 34. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 35. Синхронизировать внешний и локальный репозиторий XML

TXT
 36. Создать внешний репозиторий c названием TXT.
- заходим на сайт https://github.com/
- переходим в личный кабинет https://github.com/nzelenkevich
- открываем раздел репозиторий https://github.com/nzelenkevich?tab=repositories
- нажимаем на кнопку "new"
- в графе "Repository name" вводим TXT
- выбираем тип репозитрия "Public"
- ставим галочку напротив "Add a README file"
- нажимаем кнопку "Create repository"
- репозиторий TXT создан
 37. Клонировать репозиторий TXT на локальный компьютер.
- заходим в папку в которую хотим клонировать репозитрий TXT
- заходим в Terminal
- в репозитории XML в GitHub жмем кнопку "<> Code"
- копирем ссылку на репозиторий в HTTPS
- вставляем в терминал, используя команду "git clone https://github.com/nzelenkevich/TXT.git"
- в терминале используя команду "ls -la" проверяем клонирован ли репозиторий TXT
 38. Внутри локального TXT создать файл “new.txt”.
- в терминале переходим в папку TXT, используя команду "cd TXT"
- в терминале создаем новый файл new.txt используя команду "touch new.txt" 
- в терминале используя команду "ls -la" проверяем наличие нового файла new.txt
 39. Добавить файл под гит.
- в терминале добавляем файл new.txt на GitHub командой "git add ."
 40. Закоммитить файл.
- в терминале коммитим файл командой "git commit -m "new txt file""
- в терминале используя команду "git status" убеждаемся в том, что коммит добавлен
 40. Отправить файл на внешний GitHub репозиторий.
- в терминале используя команду "git push" выгружаем коммиты с локального репозитория в удаленный репозиторий GitHub
 41. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
будущая желаемая зарплата). Всё написать в формате TXT.
- в терминале используя команду "vim new.txt" переходим в текстовый режим
- в текстовом режиме нажимаем "i" для редактирования файла
- вношу данные: 
     person_name: Zelenkevich Natalia,
     person_age: 37,
     pets_quantity: 2,
     desired salary amount: 1500usd
- нажимаю последовательно для сохранения и выхода из режима редактирования "esc : x"
 42. Отправить изменения на внешний репозиторий.
- в терминале используя команду "git commit -am "commit 1"" вносим изменение в файл и выгружаем коммит с локального репозитория в удаленный репозиторий GitHub 
- в терминале используем команду "git push" для выгрузки измененного закоммиченного файла в удаленный репазиторий 
 43. Создать файл preferences.txt
- в терминале создаем файл preferences.txt используя команду "touch preferences.txt"
 44. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года,
 сторона которую хотели бы посетить) в формате TXT.
- в терминале используя команду "vim preferences.txt" переходим в текстовый режим
- в текстовом режиме нажимаем "i" для редактирования файла
- вношу данные: 
favourite film: Star wars,
favourite soup opera: Abbey Downtown,
favourite food: Pad thai,
favourite season: Spring,
desired destination: New Zealand
- нажимаю последовательно для сохранения и выхода из режима редактирования "esc : x"
 45. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
- в терминале создаем файл skills.xml используя команду "touch skills.xml"
- в терминале используя команду "vim skills.xml" переходим в текстовый режим
- в текстовом режиме нажимаем "i" для редактирования файла
- вношу данные:
Skills:
Theory of testing,
Reporting skills,
Basic knowledge of Linux commands,
Mobile testing,
SQL skills,
API,
JSON,
XML,
Postman,
Charles,
Fiddler,
Dev Tools,
GitHub,
Agile scrum methology,
etc.
- нажимаю последовательно для сохранения и выхода из режима редактирование "esc : x"
 46. Сделать коммит в одну строку.
- в терминале используя комнаду "git status" проверяю для какие файлы ожидают коммита
 47. Отправить сразу 2 файла на внешний репозиторий.
- в терминале используя команду "git add ." выбираю все файлы в папке
- в терминале используем команду "git push" для выгрузки закоммиченных файлов в удаленный репзиторий 
 48,49. На веб интерфейсе создать файл bug_report.txt.
- в репозитории TXT нажать на кнопку "Add file"
- в дропдаун меню выбрать "Create new file"
- присвоить имя файлу bug_report.txt
- выбрать radio button "Commit directly to the main branch"
- нажать на кнопку "Commit new file"
 50, 51. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 Сделать Commit changes (сохранить) изменения на веб интерфейсе.
- из списка файлов в репозитории TXT выбрать файл bug_report.txt
- в файле кликнуть на кнопку со значком "карандаш" и в dropdown menu выбрать "Edit a file"
- внести изменения в файл в графе "Edit file":
	Issue Title: Windows – Product Details Page – The product image can't be zoomed in,
	Issue Type: Visual,
	Frequency: Every Time,
	Priority: Low,
	Action Performed:
	
	1. Click on the image of the product,
	2. Open https://academybugs.com/find-bugs/,
	3. Open any product,
	4. Observe the image of the product,
	5. The image is broken
	
	Expected Result: A zoomed image of the product is shown,
	Actual Result: The image is broken,
	Error Message: There is no error message

- оставить комментарии к коммиту: update bug_report.json
- нажать на кнопку "Commit changes"

 52. Синхронизировать внешний и локальный репозиторий JSON
- в терминале используем команду "git pull" для синхронизации удаленного и локального репозитория 
